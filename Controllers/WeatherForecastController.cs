using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Distributed;
using Microsoft.Extensions.Caching.Memory;
using RedisDemo_AspNetCoreWebApi.Extensions;

namespace RedisDemo_AspNetCoreWebApi.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static readonly string[] Summaries = new[]
        {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

        private readonly ILogger<WeatherForecastController> _logger;
        private readonly IDistributedCache _cache;

        public WeatherForecastController(ILogger<WeatherForecastController> logger,
            IDistributedCache cache)
        {
            _logger = logger;
            _cache = cache;
        }

        [HttpGet(Name = "GetWeatherForecast")]
        public async Task<IEnumerable<WeatherForecast>> Get()
        {
            WeatherForecast[] forcasts = null;

            string recordKey = "WeatherForecast_" + DateTime.Now.ToString("yyyyMMdd_hhmm");

            forcasts = await _cache.GetCacheRecordAsync<WeatherForecast[]>(recordKey);

            if (forcasts is null)
            {
                Console.WriteLine("Data from random data generated by the api, NOT from cache");
                forcasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
                {
                    Date = DateTime.Now.AddDays(index),
                    TemperatureC = Random.Shared.Next(-20, 55),
                    Summary = Summaries[Random.Shared.Next(Summaries.Length)]
                })
                .ToArray();

                await _cache.SetCacheRecordAsync(recordKey, forcasts);
                return forcasts;
            }
            //else
            //{
            Console.WriteLine("Data fetched from redis cache");
            return forcasts;
            //}
        }
    }
}